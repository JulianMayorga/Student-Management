// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.studentmanagement.domain;

import com.studentmanagement.domain.Student;
import com.studentmanagement.domain.StudentRepository;
import com.studentmanagement.shared.Degrees;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StudentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StudentDataOnDemand: @Component;
    
    private Random StudentDataOnDemand.rnd = new SecureRandom();
    
    private List<Student> StudentDataOnDemand.data;
    
    @Autowired
    StudentRepository StudentDataOnDemand.studentRepository;
    
    public Student StudentDataOnDemand.getNewTransientStudent(int index) {
        Student obj = new Student();
        setBirthDate(obj, index);
        setDegree(obj, index);
        setImage(obj, index);
        setLogin(obj, index);
        setName(obj, index);
        setPassword(obj, index);
        setSurname(obj, index);
        return obj;
    }
    
    public void StudentDataOnDemand.setBirthDate(Student obj, int index) {
        Date birthDate = new Date(new Date().getTime() - 10000000L);
        obj.setBirthDate(birthDate);
    }
    
    public void StudentDataOnDemand.setDegree(Student obj, int index) {
        Degrees degree = Degrees.class.getEnumConstants()[0];
        obj.setDegree(degree);
    }
    
    public void StudentDataOnDemand.setImage(Student obj, int index) {
        byte[] image = String.valueOf(index).getBytes();
        obj.setImage(image);
    }
    
    public void StudentDataOnDemand.setLogin(Student obj, int index) {
        String login = "login_" + index;
        if (login.length() > 15) {
            login = new Random().nextInt(10) + login.substring(1, 15);
        }
        obj.setLogin(login);
    }
    
    public void StudentDataOnDemand.setName(Student obj, int index) {
        String name = "name_" + index;
        if (name.length() > 25) {
            name = name.substring(0, 25);
        }
        obj.setName(name);
    }
    
    public void StudentDataOnDemand.setPassword(Student obj, int index) {
        String password = "password_" + index;
        if (password.length() > 15) {
            password = password.substring(0, 15);
        }
        obj.setPassword(password);
    }
    
    public void StudentDataOnDemand.setSurname(Student obj, int index) {
        String surname = "surname_" + index;
        if (surname.length() > 25) {
            surname = surname.substring(0, 25);
        }
        obj.setSurname(surname);
    }
    
    public Student StudentDataOnDemand.getSpecificStudent(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Student obj = data.get(index);
        java.lang.Long id = obj.getId();
        return studentRepository.findOne(id);
    }
    
    public Student StudentDataOnDemand.getRandomStudent() {
        init();
        Student obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return studentRepository.findOne(id);
    }
    
    public boolean StudentDataOnDemand.modifyStudent(Student obj) {
        return false;
    }
    
    public void StudentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = studentRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Student' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.studentmanagement.domain.Student>();
        for (int i = 0; i < 10; i++) {
            Student obj = getNewTransientStudent(i);
            try {
                studentRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            studentRepository.flush();
            data.add(obj);
        }
    }
    
}
