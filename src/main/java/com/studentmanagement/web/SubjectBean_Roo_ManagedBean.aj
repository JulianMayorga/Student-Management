// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.studentmanagement.web;

import com.studentmanagement.domain.Student;
import com.studentmanagement.domain.StudentRepository;
import com.studentmanagement.domain.Subject;
import com.studentmanagement.domain.SubjectRepository;
import com.studentmanagement.web.converter.StudentConverter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.LongRangeValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect SubjectBean_Roo_ManagedBean {
    
    declare @type: SubjectBean: @ManagedBean(name = "subjectBean");
    
    declare @type: SubjectBean: @SessionScoped;
    
    @Autowired
    SubjectRepository SubjectBean.subjectRepository;
    
    @Autowired
    StudentRepository SubjectBean.studentRepository;
    
    private java.lang.String SubjectBean.name = "Subjects";
    
    private Subject SubjectBean.subject;
    
    private List<Subject> SubjectBean.allSubjects;
    
    private boolean SubjectBean.dataVisible = false;
    
    private List<java.lang.String> SubjectBean.columns;
    
    private HtmlPanelGrid SubjectBean.createPanelGrid;
    
    private HtmlPanelGrid SubjectBean.editPanelGrid;
    
    private HtmlPanelGrid SubjectBean.viewPanelGrid;
    
    private boolean SubjectBean.createDialogVisible = false;
    
    @PostConstruct
    public void SubjectBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("examDate");
        columns.add("grade");
    }
    
    public java.lang.String SubjectBean.getName() {
        return name;
    }
    
    public List<java.lang.String> SubjectBean.getColumns() {
        return columns;
    }
    
    public List<Subject> SubjectBean.getAllSubjects() {
        return allSubjects;
    }
    
    public void SubjectBean.setAllSubjects(List<Subject> allSubjects) {
        this.allSubjects = allSubjects;
    }
    
    public java.lang.String SubjectBean.findAllSubjects() {
        allSubjects = subjectRepository.findAll();
        dataVisible = !allSubjects.isEmpty();
        return null;
    }
    
    public boolean SubjectBean.isDataVisible() {
        return dataVisible;
    }
    
    public void SubjectBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid SubjectBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void SubjectBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid SubjectBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void SubjectBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid SubjectBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void SubjectBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid SubjectBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(25);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText isApprovedCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        isApprovedCreateOutput.setId("isApprovedCreateOutput");
        isApprovedCreateOutput.setValue("Is Approved:   ");
        htmlPanelGrid.getChildren().add(isApprovedCreateOutput);
        
        SelectBooleanCheckbox isApprovedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        isApprovedCreateInput.setId("isApprovedCreateInput");
        isApprovedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.isApproved}", Boolean.class));
        isApprovedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(isApprovedCreateInput);
        
        Message isApprovedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        isApprovedCreateInputMessage.setId("isApprovedCreateInputMessage");
        isApprovedCreateInputMessage.setFor("isApprovedCreateInput");
        isApprovedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(isApprovedCreateInputMessage);
        
        HtmlOutputText examDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        examDateCreateOutput.setId("examDateCreateOutput");
        examDateCreateOutput.setValue("Exam Date:   ");
        htmlPanelGrid.getChildren().add(examDateCreateOutput);
        
        Calendar examDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        examDateCreateInput.setId("examDateCreateInput");
        examDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.examDate}", Date.class));
        examDateCreateInput.setNavigator(true);
        examDateCreateInput.setEffect("slideDown");
        examDateCreateInput.setPattern("dd/MM/yyyy");
        examDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(examDateCreateInput);
        
        Message examDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        examDateCreateInputMessage.setId("examDateCreateInputMessage");
        examDateCreateInputMessage.setFor("examDateCreateInput");
        examDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(examDateCreateInputMessage);
        
        HtmlOutputText gradeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gradeCreateOutput.setId("gradeCreateOutput");
        gradeCreateOutput.setValue("Grade: * ");
        htmlPanelGrid.getChildren().add(gradeCreateOutput);
        
        Spinner gradeCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        gradeCreateInput.setId("gradeCreateInput");
        gradeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.grade}", Integer.class));
        gradeCreateInput.setRequired(true);
        gradeCreateInput.setMin(1.0);
        gradeCreateInput.setMax(10.0);
        LongRangeValidator gradeCreateInputValidator = new LongRangeValidator();
        gradeCreateInputValidator.setMinimum(1);
        gradeCreateInputValidator.setMaximum(10);
        gradeCreateInput.addValidator(gradeCreateInputValidator);
        
        htmlPanelGrid.getChildren().add(gradeCreateInput);
        
        Message gradeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        gradeCreateInputMessage.setId("gradeCreateInputMessage");
        gradeCreateInputMessage.setFor("gradeCreateInput");
        gradeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(gradeCreateInputMessage);
        
        HtmlOutputText studentCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentCreateOutput.setId("studentCreateOutput");
        studentCreateOutput.setValue("Student: * ");
        htmlPanelGrid.getChildren().add(studentCreateOutput);
        
        AutoComplete studentCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        studentCreateInput.setId("studentCreateInput");
        studentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.student}", Student.class));
        studentCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{subjectBean.completeStudent}", List.class, new Class[] { String.class }));
        studentCreateInput.setDropdown(true);
        studentCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "student", String.class));
        studentCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{student.name} #{student.surname} #{student.birthDate} #{student.login}", String.class));
        studentCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{student}", Student.class));
        studentCreateInput.setConverter(new StudentConverter());
        studentCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(studentCreateInput);
        
        Message studentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentCreateInputMessage.setId("studentCreateInputMessage");
        studentCreateInputMessage.setFor("studentCreateInput");
        studentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SubjectBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(25);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText isApprovedEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        isApprovedEditOutput.setId("isApprovedEditOutput");
        isApprovedEditOutput.setValue("Is Approved:   ");
        htmlPanelGrid.getChildren().add(isApprovedEditOutput);
        
        SelectBooleanCheckbox isApprovedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        isApprovedEditInput.setId("isApprovedEditInput");
        isApprovedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.isApproved}", Boolean.class));
        isApprovedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(isApprovedEditInput);
        
        Message isApprovedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        isApprovedEditInputMessage.setId("isApprovedEditInputMessage");
        isApprovedEditInputMessage.setFor("isApprovedEditInput");
        isApprovedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(isApprovedEditInputMessage);
        
        HtmlOutputText examDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        examDateEditOutput.setId("examDateEditOutput");
        examDateEditOutput.setValue("Exam Date:   ");
        htmlPanelGrid.getChildren().add(examDateEditOutput);
        
        Calendar examDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        examDateEditInput.setId("examDateEditInput");
        examDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.examDate}", Date.class));
        examDateEditInput.setNavigator(true);
        examDateEditInput.setEffect("slideDown");
        examDateEditInput.setPattern("dd/MM/yyyy");
        examDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(examDateEditInput);
        
        Message examDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        examDateEditInputMessage.setId("examDateEditInputMessage");
        examDateEditInputMessage.setFor("examDateEditInput");
        examDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(examDateEditInputMessage);
        
        HtmlOutputText gradeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gradeEditOutput.setId("gradeEditOutput");
        gradeEditOutput.setValue("Grade: * ");
        htmlPanelGrid.getChildren().add(gradeEditOutput);
        
        Spinner gradeEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        gradeEditInput.setId("gradeEditInput");
        gradeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.grade}", Integer.class));
        gradeEditInput.setRequired(true);
        gradeEditInput.setMin(1.0);
        gradeEditInput.setMax(10.0);
        LongRangeValidator gradeEditInputValidator = new LongRangeValidator();
        gradeEditInputValidator.setMinimum(1);
        gradeEditInputValidator.setMaximum(10);
        gradeEditInput.addValidator(gradeEditInputValidator);
        
        htmlPanelGrid.getChildren().add(gradeEditInput);
        
        Message gradeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        gradeEditInputMessage.setId("gradeEditInputMessage");
        gradeEditInputMessage.setFor("gradeEditInput");
        gradeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(gradeEditInputMessage);
        
        HtmlOutputText studentEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentEditOutput.setId("studentEditOutput");
        studentEditOutput.setValue("Student: * ");
        htmlPanelGrid.getChildren().add(studentEditOutput);
        
        AutoComplete studentEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        studentEditInput.setId("studentEditInput");
        studentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.student}", Student.class));
        studentEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{subjectBean.completeStudent}", List.class, new Class[] { String.class }));
        studentEditInput.setDropdown(true);
        studentEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "student", String.class));
        studentEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{student.name} #{student.surname} #{student.birthDate} #{student.login}", String.class));
        studentEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{student}", Student.class));
        studentEditInput.setConverter(new StudentConverter());
        studentEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(studentEditInput);
        
        Message studentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        studentEditInputMessage.setId("studentEditInputMessage");
        studentEditInputMessage.setFor("studentEditInput");
        studentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(studentEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SubjectBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText isApprovedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        isApprovedLabel.setId("isApprovedLabel");
        isApprovedLabel.setValue("Is Approved:   ");
        htmlPanelGrid.getChildren().add(isApprovedLabel);
        
        HtmlOutputText isApprovedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        isApprovedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.isApproved}", String.class));
        htmlPanelGrid.getChildren().add(isApprovedValue);
        
        HtmlOutputText examDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        examDateLabel.setId("examDateLabel");
        examDateLabel.setValue("Exam Date:   ");
        htmlPanelGrid.getChildren().add(examDateLabel);
        
        HtmlOutputText examDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        examDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.examDate}", Date.class));
        DateTimeConverter examDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        examDateValueConverter.setPattern("dd/MM/yyyy");
        examDateValue.setConverter(examDateValueConverter);
        htmlPanelGrid.getChildren().add(examDateValue);
        
        HtmlOutputText gradeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gradeLabel.setId("gradeLabel");
        gradeLabel.setValue("Grade:   ");
        htmlPanelGrid.getChildren().add(gradeLabel);
        
        HtmlOutputText gradeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gradeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.grade}", String.class));
        htmlPanelGrid.getChildren().add(gradeValue);
        
        HtmlOutputText studentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentLabel.setId("studentLabel");
        studentLabel.setValue("Student:   ");
        htmlPanelGrid.getChildren().add(studentLabel);
        
        HtmlOutputText studentValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        studentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{subjectBean.subject.student}", Student.class));
        studentValue.setConverter(new StudentConverter());
        htmlPanelGrid.getChildren().add(studentValue);
        
        return htmlPanelGrid;
    }
    
    public Subject SubjectBean.getSubject() {
        if (subject == null) {
            subject = new Subject();
        }
        return subject;
    }
    
    public void SubjectBean.setSubject(Subject subject) {
        this.subject = subject;
    }
    
    public List<Student> SubjectBean.completeStudent(java.lang.String query) {
        List<Student> suggestions = new ArrayList<Student>();
        for (Student student : studentRepository.findAll()) {
            String studentStr = String.valueOf(student.getName() +  " "  + student.getSurname() +  " "  + student.getBirthDate() +  " "  + student.getLogin());
            if (studentStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(student);
            }
        }
        return suggestions;
    }
    
    public java.lang.String SubjectBean.onEdit() {
        return null;
    }
    
    public boolean SubjectBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void SubjectBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public java.lang.String SubjectBean.displayList() {
        createDialogVisible = false;
        findAllSubjects();
        return "subject";
    }
    
    public java.lang.String SubjectBean.displayCreateDialog() {
        subject = new Subject();
        createDialogVisible = true;
        return "subject";
    }
    
    public java.lang.String SubjectBean.persist() {
        String message = "";
        if (subject.getId() != null) {
            subjectRepository.save(subject);
            message = "Successfully updated";
        } else {
            subjectRepository.save(subject);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSubjects();
    }
    
    public java.lang.String SubjectBean.delete() {
        subjectRepository.delete(subject);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSubjects();
    }
    
    public void SubjectBean.reset() {
        subject = null;
        createDialogVisible = false;
    }
    
    public void SubjectBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
